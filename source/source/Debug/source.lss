
source.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00800060  000004a4  00000538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800114  00800114  000005ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000061c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ac0  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b23  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fcf  00000000  00000000  00002d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f0  00000000  00000000  00003d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070e  00000000  00000000  0000425c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ce1  00000000  00000000  0000496a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000664b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 31       	cpi	r26, 0x14	; 20
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e1       	ldi	r26, 0x14	; 20
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 31       	cpi	r26, 0x16	; 22
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 34 01 	call	0x268	; 0x268 <main>
  8a:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcdInitHW>:
  92:	d8 98       	cbi	0x1b, 0	; 27
  94:	d9 98       	cbi	0x1b, 1	; 27
  96:	da 98       	cbi	0x1b, 2	; 27
  98:	d0 9a       	sbi	0x1a, 0	; 26
  9a:	d1 9a       	sbi	0x1a, 1	; 26
  9c:	d2 9a       	sbi	0x1a, 2	; 26
  9e:	14 ba       	out	0x14, r1	; 20
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	85 bb       	out	0x15, r24	; 21
  a4:	08 95       	ret

000000a6 <lcdBusyWait>:
  a6:	d8 98       	cbi	0x1b, 0	; 27
  a8:	14 ba       	out	0x14, r1	; 20
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	85 bb       	out	0x15, r24	; 21
  ae:	d9 9a       	sbi	0x1b, 1	; 27
  b0:	da 9a       	sbi	0x1b, 2	; 27
  b2:	00 00       	nop
  b4:	00 00       	nop
  b6:	00 00       	nop
  b8:	9f 9b       	sbis	0x13, 7	; 19
  ba:	10 c0       	rjmp	.+32     	; 0xdc <lcdBusyWait+0x36>
  bc:	da 98       	cbi	0x1b, 2	; 27
	...
  ca:	da 9a       	sbi	0x1b, 2	; 27
	...
  d8:	9f 99       	sbic	0x13, 7	; 19
  da:	f0 cf       	rjmp	.-32     	; 0xbc <lcdBusyWait+0x16>
  dc:	da 98       	cbi	0x1b, 2	; 27
  de:	08 95       	ret

000000e0 <lcdControlWrite>:
  e0:	cf 93       	push	r28
  e2:	c8 2f       	mov	r28, r24
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdBusyWait>
  e8:	d8 98       	cbi	0x1b, 0	; 27
  ea:	d9 98       	cbi	0x1b, 1	; 27
  ec:	da 9a       	sbi	0x1b, 2	; 27
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	84 bb       	out	0x14, r24	; 20
  f2:	c5 bb       	out	0x15, r28	; 21
	...
 100:	da 98       	cbi	0x1b, 2	; 27
 102:	14 ba       	out	0x14, r1	; 20
 104:	85 bb       	out	0x15, r24	; 21
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <lcdDataWrite>:
 10a:	cf 93       	push	r28
 10c:	c8 2f       	mov	r28, r24
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdBusyWait>
 112:	d8 9a       	sbi	0x1b, 0	; 27
 114:	d9 98       	cbi	0x1b, 1	; 27
 116:	da 9a       	sbi	0x1b, 2	; 27
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	84 bb       	out	0x14, r24	; 20
 11c:	c5 bb       	out	0x15, r28	; 21
	...
 12a:	da 98       	cbi	0x1b, 2	; 27
 12c:	14 ba       	out	0x14, r1	; 20
 12e:	85 bb       	out	0x15, r24	; 21
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <lcdInit>:
 134:	0e 94 49 00 	call	0x92	; 0x92 <lcdInitHW>
 138:	88 e3       	ldi	r24, 0x38	; 56
 13a:	0e 94 70 00 	call	0xe0	; 0xe0 <lcdControlWrite>
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 70 00 	call	0xe0	; 0xe0 <lcdControlWrite>
 144:	87 e9       	ldi	r24, 0x97	; 151
 146:	9a e3       	ldi	r25, 0x3A	; 58
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcdInit+0x14>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <lcdInit+0x1a>
 14e:	00 00       	nop
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	0e 94 70 00 	call	0xe0	; 0xe0 <lcdControlWrite>
 156:	8c e0       	ldi	r24, 0x0C	; 12
 158:	0e 94 70 00 	call	0xe0	; 0xe0 <lcdControlWrite>
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	0e 94 70 00 	call	0xe0	; 0xe0 <lcdControlWrite>
 162:	80 e8       	ldi	r24, 0x80	; 128
 164:	0e 94 70 00 	call	0xe0	; 0xe0 <lcdControlWrite>
 168:	08 95       	ret

0000016a <lcdClear>:
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 70 00 	call	0xe0	; 0xe0 <lcdControlWrite>
 170:	08 95       	ret

00000172 <lcdGotoXY>:
 172:	62 30       	cpi	r22, 0x02	; 2
 174:	31 f0       	breq	.+12     	; 0x182 <lcdGotoXY+0x10>
 176:	63 30       	cpi	r22, 0x03	; 3
 178:	31 f0       	breq	.+12     	; 0x186 <lcdGotoXY+0x14>
 17a:	61 30       	cpi	r22, 0x01	; 1
 17c:	29 f4       	brne	.+10     	; 0x188 <lcdGotoXY+0x16>
 17e:	80 5c       	subi	r24, 0xC0	; 192
 180:	03 c0       	rjmp	.+6      	; 0x188 <lcdGotoXY+0x16>
 182:	8c 5e       	subi	r24, 0xEC	; 236
 184:	01 c0       	rjmp	.+2      	; 0x188 <lcdGotoXY+0x16>
 186:	8c 5a       	subi	r24, 0xAC	; 172
 188:	80 68       	ori	r24, 0x80	; 128
 18a:	0e 94 70 00 	call	0xe0	; 0xe0 <lcdControlWrite>
 18e:	08 95       	ret

00000190 <Key_Press>:
			lcdGotoXY(4,1);
			rprintfStr("off");
			break;
			
			case 35:
			lcdClear();
 190:	80 e7       	ldi	r24, 0x70	; 112
 192:	82 bb       	out	0x12, r24	; 18
 194:	80 b3       	in	r24, 0x10	; 16
 196:	80 77       	andi	r24, 0x70	; 112
 198:	80 37       	cpi	r24, 0x70	; 112
 19a:	61 f0       	breq	.+24     	; 0x1b4 <Key_Press+0x24>
 19c:	87 e8       	ldi	r24, 0x87	; 135
 19e:	93 e1       	ldi	r25, 0x13	; 19
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <Key_Press+0x10>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <Key_Press+0x16>
 1a6:	00 00       	nop
 1a8:	90 b3       	in	r25, 0x10	; 16
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 37       	cpi	r25, 0x70	; 112
 1ae:	19 f4       	brne	.+6      	; 0x1b6 <Key_Press+0x26>
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	08 95       	ret
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	08 95       	ret

000001b8 <Key_Released>:
 1b8:	80 e7       	ldi	r24, 0x70	; 112
 1ba:	82 bb       	out	0x12, r24	; 18
 1bc:	90 b3       	in	r25, 0x10	; 16
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 37       	cpi	r25, 0x70	; 112
 1c2:	09 f0       	breq	.+2      	; 0x1c6 <Key_Released+0xe>
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	08 95       	ret

000001c8 <Key_Scan>:
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	0e 94 c8 00 	call	0x190	; 0x190 <Key_Press>
 1d0:	88 23       	and	r24, r24
 1d2:	61 f1       	breq	.+88     	; 0x22c <Key_Scan+0x64>
 1d4:	e0 e6       	ldi	r30, 0x60	; 96
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	5f e7       	ldi	r21, 0x7F	; 127
 1e0:	a1 e0       	ldi	r26, 0x01	; 1
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	52 bb       	out	0x12, r21	; 18
 1e6:	42 b3       	in	r20, 0x12	; 18
 1e8:	bd 01       	movw	r22, r26
 1ea:	02 2e       	mov	r0, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <Key_Scan+0x2a>
 1ee:	66 0f       	add	r22, r22
 1f0:	77 1f       	adc	r23, r23
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <Key_Scan+0x26>
 1f6:	96 2f       	mov	r25, r22
 1f8:	90 95       	com	r25
 1fa:	94 23       	and	r25, r20
 1fc:	92 bb       	out	0x12, r25	; 18
 1fe:	cd ee       	ldi	r28, 0xED	; 237
 200:	d2 e0       	ldi	r29, 0x02	; 2
 202:	21 97       	sbiw	r28, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <Key_Scan+0x3a>
 206:	00 c0       	rjmp	.+0      	; 0x208 <Key_Scan+0x40>
 208:	00 00       	nop
 20a:	84 99       	sbic	0x10, 4	; 16
 20c:	02 c0       	rjmp	.+4      	; 0x212 <Key_Scan+0x4a>
 20e:	80 81       	ld	r24, Z
 210:	06 c0       	rjmp	.+12     	; 0x21e <Key_Scan+0x56>
 212:	85 99       	sbic	0x10, 5	; 16
 214:	02 c0       	rjmp	.+4      	; 0x21a <Key_Scan+0x52>
 216:	81 81       	ldd	r24, Z+1	; 0x01
 218:	02 c0       	rjmp	.+4      	; 0x21e <Key_Scan+0x56>
 21a:	86 9b       	sbis	0x10, 6	; 16
 21c:	82 81       	ldd	r24, Z+2	; 0x02
 21e:	2f 5f       	subi	r18, 0xFF	; 255
 220:	3f 4f       	sbci	r19, 0xFF	; 255
 222:	33 96       	adiw	r30, 0x03	; 3
 224:	24 30       	cpi	r18, 0x04	; 4
 226:	31 05       	cpc	r19, r1
 228:	e9 f6       	brne	.-70     	; 0x1e4 <Key_Scan+0x1c>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <Key_Scan+0x64>
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <LCD_Custom_Char>:
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	88 30       	cpi	r24, 0x08	; 8
 23c:	80 f4       	brcc	.+32     	; 0x25e <LCD_Custom_Char+0x2c>
 23e:	8b 01       	movw	r16, r22
 240:	88 0f       	add	r24, r24
 242:	88 0f       	add	r24, r24
 244:	88 0f       	add	r24, r24
 246:	80 5c       	subi	r24, 0xC0	; 192
 248:	0e 94 70 00 	call	0xe0	; 0xe0 <lcdControlWrite>
 24c:	e8 01       	movw	r28, r16
 24e:	08 5f       	subi	r16, 0xF8	; 248
 250:	1f 4f       	sbci	r17, 0xFF	; 255
 252:	89 91       	ld	r24, Y+
 254:	0e 94 85 00 	call	0x10a	; 0x10a <lcdDataWrite>
 258:	c0 17       	cp	r28, r16
 25a:	d1 07       	cpc	r29, r17
 25c:	d1 f7       	brne	.-12     	; 0x252 <LCD_Custom_Char+0x20>
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	08 95       	ret

00000268 <main>:
		}
	}
}
//========================================================================================= 
int main(void)
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	c8 55       	subi	r28, 0x58	; 88
 272:	d1 09       	sbc	r29, r1
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
	DDRD=0x8f;
 27e:	8f e8       	ldi	r24, 0x8F	; 143
 280:	81 bb       	out	0x11, r24	; 17
	sbi(DDRD,7);
 282:	8f 9a       	sbi	0x11, 7	; 17
	cbi(PORTD,7);
 284:	97 98       	cbi	0x12, 7	; 18
	lcdInit();
 286:	0e 94 9a 00 	call	0x134	; 0x134 <lcdInit>
	rprintfInit(lcdDataWrite);
 28a:	85 e8       	ldi	r24, 0x85	; 133
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 28 02 	call	0x450	; 0x450 <rprintfInit>
//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/

	//login();]
	unsigned char Character1[8] = { 0x10, 0x18, 0x1c, 0x1e, 0x1c, 0x18, 0x10, 0x00 };  /* Custom char set for alphanumeric LCD Module */
 292:	88 e0       	ldi	r24, 0x08	; 8
 294:	ec e6       	ldi	r30, 0x6C	; 108
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	de 01       	movw	r26, r28
 29a:	11 96       	adiw	r26, 0x01	; 1
 29c:	01 90       	ld	r0, Z+
 29e:	0d 92       	st	X+, r0
 2a0:	8a 95       	dec	r24
 2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0x34>
	unsigned char Character2[8] = { 0x04, 0x0E, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00 };
 2a4:	88 e0       	ldi	r24, 0x08	; 8
 2a6:	e4 e7       	ldi	r30, 0x74	; 116
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	de 01       	movw	r26, r28
 2ac:	19 96       	adiw	r26, 0x09	; 9
 2ae:	01 90       	ld	r0, Z+
 2b0:	0d 92       	st	X+, r0
 2b2:	8a 95       	dec	r24
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x46>
	unsigned char Character3[8] = { 0x00, 0x00, 0x00, 0x00, 0x1F, 0x0E, 0x04, 0x00 };
 2b6:	88 e0       	ldi	r24, 0x08	; 8
 2b8:	ec e7       	ldi	r30, 0x7C	; 124
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	de 01       	movw	r26, r28
 2be:	51 96       	adiw	r26, 0x11	; 17
 2c0:	01 90       	ld	r0, Z+
 2c2:	0d 92       	st	X+, r0
 2c4:	8a 95       	dec	r24
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0x58>

	LCD_Custom_Char(0, Character1);  /* Build Character1 at position 0 */
 2c8:	be 01       	movw	r22, r28
 2ca:	6f 5f       	subi	r22, 0xFF	; 255
 2cc:	7f 4f       	sbci	r23, 0xFF	; 255
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	0e 94 19 01 	call	0x232	; 0x232 <LCD_Custom_Char>
	LCD_Custom_Char(1, Character2);  /* Build Character2 at position 1 */
 2d4:	be 01       	movw	r22, r28
 2d6:	67 5f       	subi	r22, 0xF7	; 247
 2d8:	7f 4f       	sbci	r23, 0xFF	; 255
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 19 01 	call	0x232	; 0x232 <LCD_Custom_Char>
	LCD_Custom_Char(2, Character3);  /* Build Character3 at position 2 */
 2e0:	be 01       	movw	r22, r28
 2e2:	6f 5e       	subi	r22, 0xEF	; 239
 2e4:	7f 4f       	sbci	r23, 0xFF	; 255
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	0e 94 19 01 	call	0x232	; 0x232 <LCD_Custom_Char>
//	----------------------------------------------------------------------
	char menuItemStr[menuItemNum][16]={{"Change PW"},{"Beep Status"},{"WIFI Connection"},{"Progress"}};
 2ec:	80 e4       	ldi	r24, 0x40	; 64
 2ee:	e4 e8       	ldi	r30, 0x84	; 132
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	de 01       	movw	r26, r28
 2f4:	59 96       	adiw	r26, 0x19	; 25
 2f6:	01 90       	ld	r0, Z+
 2f8:	0d 92       	st	X+, r0
 2fa:	8a 95       	dec	r24
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <main+0x8e>
	int cursurLine;
	uint8_t enter=0;
	uint8_t keyEntered=1;
 2fe:	dd 24       	eor	r13, r13
 300:	d3 94       	inc	r13
	LCD_Custom_Char(1, Character2);  /* Build Character2 at position 1 */
	LCD_Custom_Char(2, Character3);  /* Build Character3 at position 2 */
//	----------------------------------------------------------------------
	char menuItemStr[menuItemNum][16]={{"Change PW"},{"Beep Status"},{"WIFI Connection"},{"Progress"}};
	int cursurLine;
	uint8_t enter=0;
 302:	10 e0       	ldi	r17, 0x00	; 0
					while (!Key_Released()); 
					}
					break;
				
			case 5: 
				enter=1; 
 304:	bb 24       	eor	r11, r11
 306:	b3 94       	inc	r11
			
			case 8:	
				if (index<2){
					if (cursurLine==1)
					index ++;
					cursurLine = 1;
 308:	77 24       	eor	r7, r7
 30a:	73 94       	inc	r7
 30c:	81 2c       	mov	r8, r1
				
			case 2:
				if (index>0){
					if (cursurLine==0) 
					index --;
					cursurLine = 0;
 30e:	91 2c       	mov	r9, r1
 310:	a1 2c       	mov	r10, r1
 312:	02 c0       	rjmp	.+4      	; 0x318 <main+0xb0>
					lcdClear();
					rprintfStr("this is 3");
					break;
				}
				enter=0;
				keyEntered=1;
 314:	db 2c       	mov	r13, r11
				case 3:
					lcdClear();
					rprintfStr("this is 3");
					break;
				}
				enter=0;
 316:	10 e0       	ldi	r17, 0x00	; 0

	
	while (1)
	{
		
		switch(Key_Scan()){
 318:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Key_Scan>
 31c:	85 30       	cpi	r24, 0x05	; 5
 31e:	f1 f0       	breq	.+60     	; 0x35c <main+0xf4>
 320:	88 30       	cpi	r24, 0x08	; 8
 322:	19 f0       	breq	.+6      	; 0x32a <main+0xc2>
 324:	82 30       	cpi	r24, 0x02	; 2
 326:	01 f5       	brne	.+64     	; 0x368 <main+0x100>
 328:	0d c0       	rjmp	.+26     	; 0x344 <main+0xdc>
			
			case 8:	
				if (index<2){
 32a:	02 30       	cpi	r16, 0x02	; 2
 32c:	e8 f4       	brcc	.+58     	; 0x368 <main+0x100>
					if (cursurLine==1)
 32e:	ea 94       	dec	r14
 330:	ef 28       	or	r14, r15
 332:	09 f4       	brne	.+2      	; 0x336 <main+0xce>
					index ++;
 334:	0f 5f       	subi	r16, 0xFF	; 255
					cursurLine = 1;
					keyEntered=1;
					while (!Key_Released()); 
 336:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <Key_Released>
 33a:	88 23       	and	r24, r24
 33c:	e1 f3       	breq	.-8      	; 0x336 <main+0xce>
			
			case 8:	
				if (index<2){
					if (cursurLine==1)
					index ++;
					cursurLine = 1;
 33e:	e7 2c       	mov	r14, r7
 340:	f8 2c       	mov	r15, r8
 342:	15 c0       	rjmp	.+42     	; 0x36e <main+0x106>
					while (!Key_Released()); 
					}
					break;	
				
			case 2:
				if (index>0){
 344:	00 23       	and	r16, r16
 346:	81 f0       	breq	.+32     	; 0x368 <main+0x100>
					if (cursurLine==0) 
 348:	ef 28       	or	r14, r15
 34a:	09 f4       	brne	.+2      	; 0x34e <main+0xe6>
					index --;
 34c:	01 50       	subi	r16, 0x01	; 1
					cursurLine = 0;
					keyEntered=1;
					while (!Key_Released()); 
 34e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <Key_Released>
 352:	88 23       	and	r24, r24
 354:	e1 f3       	breq	.-8      	; 0x34e <main+0xe6>
				
			case 2:
				if (index>0){
					if (cursurLine==0) 
					index --;
					cursurLine = 0;
 356:	e9 2c       	mov	r14, r9
 358:	fa 2c       	mov	r15, r10
 35a:	09 c0       	rjmp	.+18     	; 0x36e <main+0x106>
					break;
				
			case 5: 
				enter=1; 
				keyEntered=1; 
				while (!Key_Released()); 
 35c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <Key_Released>
 360:	88 23       	and	r24, r24
 362:	e1 f3       	breq	.-8      	; 0x35c <main+0xf4>
					while (!Key_Released()); 
					}
					break;
				
			case 5: 
				enter=1; 
 364:	1b 2d       	mov	r17, r11
 366:	03 c0       	rjmp	.+6      	; 0x36e <main+0x106>
				keyEntered=1; 
				while (!Key_Released()); 
				break;
		}
			
		if (keyEntered==1){
 368:	31 e0       	ldi	r19, 0x01	; 1
 36a:	d3 12       	cpse	r13, r19
 36c:	2f c0       	rjmp	.+94     	; 0x3cc <main+0x164>
				lcdClear();
 36e:	0e 94 b5 00 	call	0x16a	; 0x16a <lcdClear>
				
				lcdGotoXY(0,cursurLine);
 372:	6e 2d       	mov	r22, r14
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	0e 94 b9 00 	call	0x172	; 0x172 <lcdGotoXY>
				rprintfChar(0);
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	0e 94 2d 02 	call	0x45a	; 0x45a <rprintfChar>
				
				lcdGotoXY(1,0);
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	8b 2d       	mov	r24, r11
 384:	0e 94 b9 00 	call	0x172	; 0x172 <lcdGotoXY>
				rprintfStr(menuItemStr[index]);
 388:	c0 2e       	mov	r12, r16
 38a:	d1 2c       	mov	r13, r1
 38c:	89 e1       	ldi	r24, 0x19	; 25
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	8c 0f       	add	r24, r28
 392:	9d 1f       	adc	r25, r29
 394:	20 e1       	ldi	r18, 0x10	; 16
 396:	02 9f       	mul	r16, r18
 398:	80 0d       	add	r24, r0
 39a:	91 1d       	adc	r25, r1
 39c:	11 24       	eor	r1, r1
 39e:	0e 94 3f 02 	call	0x47e	; 0x47e <rprintfStr>
				
				lcdGotoXY(1,1);
 3a2:	6b 2d       	mov	r22, r11
 3a4:	8b 2d       	mov	r24, r11
 3a6:	0e 94 b9 00 	call	0x172	; 0x172 <lcdGotoXY>
				rprintfStr(menuItemStr[index+1]);
 3aa:	c6 01       	movw	r24, r12
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	82 95       	swap	r24
 3b0:	92 95       	swap	r25
 3b2:	90 7f       	andi	r25, 0xF0	; 240
 3b4:	98 27       	eor	r25, r24
 3b6:	80 7f       	andi	r24, 0xF0	; 240
 3b8:	98 27       	eor	r25, r24
 3ba:	29 e1       	ldi	r18, 0x19	; 25
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	2c 0f       	add	r18, r28
 3c0:	3d 1f       	adc	r19, r29
 3c2:	82 0f       	add	r24, r18
 3c4:	93 1f       	adc	r25, r19
 3c6:	0e 94 3f 02 	call	0x47e	; 0x47e <rprintfStr>
				
				keyEntered=0;
 3ca:	d1 2c       	mov	r13, r1
		}
		
		if (enter==1){
 3cc:	11 30       	cpi	r17, 0x01	; 1
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <main+0x16a>
 3d0:	a3 cf       	rjmp	.-186    	; 0x318 <main+0xb0>
			switch(cursurLine+index){
 3d2:	c7 01       	movw	r24, r14
 3d4:	80 0f       	add	r24, r16
 3d6:	91 1d       	adc	r25, r1
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	91 05       	cpc	r25, r1
 3dc:	99 f0       	breq	.+38     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3de:	1c f4       	brge	.+6      	; 0x3e6 <main+0x17e>
 3e0:	89 2b       	or	r24, r25
 3e2:	39 f0       	breq	.+14     	; 0x3f2 <main+0x18a>
 3e4:	97 cf       	rjmp	.-210    	; 0x314 <main+0xac>
 3e6:	82 30       	cpi	r24, 0x02	; 2
 3e8:	91 05       	cpc	r25, r1
 3ea:	a9 f0       	breq	.+42     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3ec:	03 97       	sbiw	r24, 0x03	; 3
 3ee:	39 f1       	breq	.+78     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3f0:	91 cf       	rjmp	.-222    	; 0x314 <main+0xac>
				case 0:
					lcdClear();
 3f2:	0e 94 b5 00 	call	0x16a	; 0x16a <lcdClear>
					rprintfStr("this is 0");
 3f6:	88 ee       	ldi	r24, 0xE8	; 232
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 3f 02 	call	0x47e	; 0x47e <rprintfStr>
					lcdClear();
					rprintfStr("this is 3");
					break;
				}
				enter=0;
				keyEntered=1;
 3fe:	db 2c       	mov	r13, r11
				case 3:
					lcdClear();
					rprintfStr("this is 3");
					break;
				}
				enter=0;
 400:	10 e0       	ldi	r17, 0x00	; 0
		if (enter==1){
			switch(cursurLine+index){
				case 0:
					lcdClear();
					rprintfStr("this is 0");
				break;
 402:	8a cf       	rjmp	.-236    	; 0x318 <main+0xb0>
				
				case 1:
					lcdClear();
 404:	0e 94 b5 00 	call	0x16a	; 0x16a <lcdClear>
					rprintfStr("this is 1");
 408:	82 ef       	ldi	r24, 0xF2	; 242
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 3f 02 	call	0x47e	; 0x47e <rprintfStr>
					lcdClear();
					rprintfStr("this is 3");
					break;
				}
				enter=0;
				keyEntered=1;
 410:	db 2c       	mov	r13, r11
				case 3:
					lcdClear();
					rprintfStr("this is 3");
					break;
				}
				enter=0;
 412:	10 e0       	ldi	r17, 0x00	; 0
				break;
				
				case 1:
					lcdClear();
					rprintfStr("this is 1");
				break;
 414:	81 cf       	rjmp	.-254    	; 0x318 <main+0xb0>
				
				case 2:
					lcdClear();
 416:	0e 94 b5 00 	call	0x16a	; 0x16a <lcdClear>
					rprintfStr("WIFI is wrong");
 41a:	8c ef       	ldi	r24, 0xFC	; 252
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 3f 02 	call	0x47e	; 0x47e <rprintfStr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 422:	3f e7       	ldi	r19, 0x7F	; 127
 424:	8a e1       	ldi	r24, 0x1A	; 26
 426:	96 e0       	ldi	r25, 0x06	; 6
 428:	31 50       	subi	r19, 0x01	; 1
 42a:	80 40       	sbci	r24, 0x00	; 0
 42c:	90 40       	sbci	r25, 0x00	; 0
 42e:	e1 f7       	brne	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 432:	00 00       	nop
					_delay_ms(2000);
					lcdClear();
 434:	0e 94 b5 00 	call	0x16a	; 0x16a <lcdClear>
					lcdClear();
					rprintfStr("this is 3");
					break;
				}
				enter=0;
				keyEntered=1;
 438:	db 2c       	mov	r13, r11
				case 3:
					lcdClear();
					rprintfStr("this is 3");
					break;
				}
				enter=0;
 43a:	10 e0       	ldi	r17, 0x00	; 0
				case 2:
					lcdClear();
					rprintfStr("WIFI is wrong");
					_delay_ms(2000);
					lcdClear();
				break;
 43c:	6d cf       	rjmp	.-294    	; 0x318 <main+0xb0>
				
				case 3:
					lcdClear();
 43e:	0e 94 b5 00 	call	0x16a	; 0x16a <lcdClear>
					rprintfStr("this is 3");
 442:	8a e0       	ldi	r24, 0x0A	; 10
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	0e 94 3f 02 	call	0x47e	; 0x47e <rprintfStr>
					break;
				}
				enter=0;
				keyEntered=1;
 44a:	db 2c       	mov	r13, r11
				case 3:
					lcdClear();
					rprintfStr("this is 3");
					break;
				}
				enter=0;
 44c:	10 e0       	ldi	r17, 0x00	; 0
				break;
				
				case 3:
					lcdClear();
					rprintfStr("this is 3");
					break;
 44e:	64 cf       	rjmp	.-312    	; 0x318 <main+0xb0>

00000450 <rprintfInit>:
 450:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 454:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 458:	08 95       	ret

0000045a <rprintfChar>:
 45a:	cf 93       	push	r28
 45c:	c8 2f       	mov	r28, r24
 45e:	8a 30       	cpi	r24, 0x0A	; 10
 460:	31 f4       	brne	.+12     	; 0x46e <__stack+0xf>
 462:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end>
 466:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__data_end+0x1>
 46a:	8d e0       	ldi	r24, 0x0D	; 13
 46c:	09 95       	icall
 46e:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end>
 472:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__data_end+0x1>
 476:	8c 2f       	mov	r24, r28
 478:	09 95       	icall
 47a:	cf 91       	pop	r28
 47c:	08 95       	ret

0000047e <rprintfStr>:
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	ec 01       	movw	r28, r24
 484:	89 2b       	or	r24, r25
 486:	49 f0       	breq	.+18     	; 0x49a <rprintfStr+0x1c>
 488:	88 81       	ld	r24, Y
 48a:	88 23       	and	r24, r24
 48c:	31 f0       	breq	.+12     	; 0x49a <rprintfStr+0x1c>
 48e:	21 96       	adiw	r28, 0x01	; 1
 490:	0e 94 2d 02 	call	0x45a	; 0x45a <rprintfChar>
 494:	89 91       	ld	r24, Y+
 496:	81 11       	cpse	r24, r1
 498:	fb cf       	rjmp	.-10     	; 0x490 <rprintfStr+0x12>
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	08 95       	ret

000004a0 <_exit>:
 4a0:	f8 94       	cli

000004a2 <__stop_program>:
 4a2:	ff cf       	rjmp	.-2      	; 0x4a2 <__stop_program>
