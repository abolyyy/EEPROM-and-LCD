
source.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a00  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c0  00800060  00000a00  00000ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800120  00800120  00000b74  2**0
                  ALLOC
  3 .eeprom       00000008  00810000  00810000  00000b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bac  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001c0  00000000  00000000  00000be8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001e6e  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b1d  00000000  00000000  00002c16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012c8  00000000  00000000  00003733  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004f8  00000000  00000000  000049fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006f3  00000000  00000000  00004ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001daf  00000000  00000000  000055e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000168  00000000  00000000  00007396  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	73 75       	andi	r23, 0x53	; 83
  56:	63 63       	ori	r22, 0x33	; 51
  58:	73 65       	ori	r23, 0x53	; 83
  5a:	73 66       	ori	r23, 0x63	; 99
  5c:	75 6c       	ori	r23, 0xC5	; 197
	...

0000005f <__c.2290>:
  5f:	77 72 6f 6e 67 20 70 61 73 73 77 6f 72 64 00        wrong password.

0000006e <__c.2284>:
  6e:	2a 00                                               *.

00000070 <__c.2279>:
  70:	25 64 00                                            %d.

00000073 <__c.2273>:
  73:	20 00                                                .

00000075 <__c.2252>:
  75:	25 64 00                                            %d.

00000078 <HexChars>:
  78:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf e5       	ldi	r28, 0x5F	; 95
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
  96:	11 e0       	ldi	r17, 0x01	; 1
  98:	a0 e6       	ldi	r26, 0x60	; 96
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	e0 e0       	ldi	r30, 0x00	; 0
  9e:	fa e0       	ldi	r31, 0x0A	; 10
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
  a2:	05 90       	lpm	r0, Z+
  a4:	0d 92       	st	X+, r0
  a6:	a0 32       	cpi	r26, 0x20	; 32
  a8:	b1 07       	cpc	r27, r17
  aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	a0 e2       	ldi	r26, 0x20	; 32
  b0:	b1 e0       	ldi	r27, 0x01	; 1
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a2 33       	cpi	r26, 0x32	; 50
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	0e 94 77 02 	call	0x4ee	; 0x4ee <main>
  c0:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <_exit>

000000c4 <__bad_interrupt>:
  c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <lcdInitHW>:
}

void lcdHome(void)
{
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
  c8:	d8 98       	cbi	0x1b, 0	; 27
  ca:	d9 98       	cbi	0x1b, 1	; 27
  cc:	da 98       	cbi	0x1b, 2	; 27
  ce:	d0 9a       	sbi	0x1a, 0	; 26
  d0:	d1 9a       	sbi	0x1a, 1	; 26
  d2:	d2 9a       	sbi	0x1a, 2	; 26
  d4:	14 ba       	out	0x14, r1	; 20
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	85 bb       	out	0x15, r24	; 21
  da:	08 95       	ret

000000dc <lcdBusyWait>:
  dc:	d8 98       	cbi	0x1b, 0	; 27
  de:	14 ba       	out	0x14, r1	; 20
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	85 bb       	out	0x15, r24	; 21
  e4:	d9 9a       	sbi	0x1b, 1	; 27
  e6:	da 9a       	sbi	0x1b, 2	; 27
  e8:	00 00       	nop
  ea:	00 00       	nop
  ec:	00 00       	nop
  ee:	9f 9b       	sbis	0x13, 7	; 19
  f0:	10 c0       	rjmp	.+32     	; 0x112 <lcdBusyWait+0x36>
  f2:	da 98       	cbi	0x1b, 2	; 27
	...
 100:	da 9a       	sbi	0x1b, 2	; 27
	...
 10e:	9f 99       	sbic	0x13, 7	; 19
 110:	f0 cf       	rjmp	.-32     	; 0xf2 <lcdBusyWait+0x16>
 112:	da 98       	cbi	0x1b, 2	; 27
 114:	08 95       	ret

00000116 <lcdControlWrite>:
 116:	cf 93       	push	r28
 118:	c8 2f       	mov	r28, r24
 11a:	0e 94 6e 00 	call	0xdc	; 0xdc <lcdBusyWait>
 11e:	d8 98       	cbi	0x1b, 0	; 27
 120:	d9 98       	cbi	0x1b, 1	; 27
 122:	da 9a       	sbi	0x1b, 2	; 27
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	84 bb       	out	0x14, r24	; 20
 128:	c5 bb       	out	0x15, r28	; 21
	...
 136:	da 98       	cbi	0x1b, 2	; 27
 138:	14 ba       	out	0x14, r1	; 20
 13a:	85 bb       	out	0x15, r24	; 21
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <lcdDataWrite>:
 140:	cf 93       	push	r28
 142:	c8 2f       	mov	r28, r24
 144:	0e 94 6e 00 	call	0xdc	; 0xdc <lcdBusyWait>
 148:	d8 9a       	sbi	0x1b, 0	; 27
 14a:	d9 98       	cbi	0x1b, 1	; 27
 14c:	da 9a       	sbi	0x1b, 2	; 27
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	84 bb       	out	0x14, r24	; 20
 152:	c5 bb       	out	0x15, r28	; 21
	...
 160:	da 98       	cbi	0x1b, 2	; 27
 162:	14 ba       	out	0x14, r1	; 20
 164:	85 bb       	out	0x15, r24	; 21
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <lcdInit>:
 16a:	0e 94 64 00 	call	0xc8	; 0xc8 <lcdInitHW>
 16e:	88 e3       	ldi	r24, 0x38	; 56
 170:	0e 94 8b 00 	call	0x116	; 0x116 <lcdControlWrite>
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 8b 00 	call	0x116	; 0x116 <lcdControlWrite>
 17a:	87 e9       	ldi	r24, 0x97	; 151
 17c:	9a e3       	ldi	r25, 0x3A	; 58
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcdInit+0x14>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcdInit+0x1a>
 184:	00 00       	nop
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	0e 94 8b 00 	call	0x116	; 0x116 <lcdControlWrite>
 18c:	8c e0       	ldi	r24, 0x0C	; 12
 18e:	0e 94 8b 00 	call	0x116	; 0x116 <lcdControlWrite>
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 8b 00 	call	0x116	; 0x116 <lcdControlWrite>
 198:	80 e8       	ldi	r24, 0x80	; 128
 19a:	0e 94 8b 00 	call	0x116	; 0x116 <lcdControlWrite>
 19e:	08 95       	ret

000001a0 <lcdClear>:
}

void lcdClear(void)
{
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 8b 00 	call	0x116	; 0x116 <lcdControlWrite>
 1a6:	08 95       	ret

000001a8 <lcdGotoXY>:
void lcdGotoXY(u08 x, u08 y)
{
	register u08 DDRAMAddr;

	// remap lines into proper order
	switch(y)
 1a8:	62 30       	cpi	r22, 0x02	; 2
 1aa:	31 f0       	breq	.+12     	; 0x1b8 <lcdGotoXY+0x10>
 1ac:	63 30       	cpi	r22, 0x03	; 3
 1ae:	31 f0       	breq	.+12     	; 0x1bc <lcdGotoXY+0x14>
 1b0:	61 30       	cpi	r22, 0x01	; 1
 1b2:	29 f4       	brne	.+10     	; 0x1be <lcdGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 1b4:	80 5c       	subi	r24, 0xC0	; 192
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <lcdGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 1b8:	8c 5e       	subi	r24, 0xEC	; 236
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <lcdGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 1bc:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}

	// set data address
	lcdControlWrite(1<<LCD_DDRAM | DDRAMAddr);
 1be:	80 68       	ori	r24, 0x80	; 128
 1c0:	0e 94 8b 00 	call	0x116	; 0x116 <lcdControlWrite>
 1c4:	08 95       	ret

000001c6 <Key_Press>:
			lcdGotoXY(4,1);
			rprintfStr("off");
			break;
			
			case 35:
			lcdClear();
 1c6:	80 e7       	ldi	r24, 0x70	; 112
 1c8:	82 bb       	out	0x12, r24	; 18
 1ca:	80 b3       	in	r24, 0x10	; 16
 1cc:	80 77       	andi	r24, 0x70	; 112
 1ce:	80 37       	cpi	r24, 0x70	; 112
 1d0:	61 f0       	breq	.+24     	; 0x1ea <Key_Press+0x24>
 1d2:	87 e8       	ldi	r24, 0x87	; 135
 1d4:	93 e1       	ldi	r25, 0x13	; 19
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <Key_Press+0x10>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <Key_Press+0x16>
 1dc:	00 00       	nop
 1de:	90 b3       	in	r25, 0x10	; 16
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 37       	cpi	r25, 0x70	; 112
 1e4:	19 f4       	brne	.+6      	; 0x1ec <Key_Press+0x26>
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	08 95       	ret
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	08 95       	ret

000001ee <Key_Released>:
 1ee:	80 e7       	ldi	r24, 0x70	; 112
 1f0:	82 bb       	out	0x12, r24	; 18
 1f2:	90 b3       	in	r25, 0x10	; 16
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 37       	cpi	r25, 0x70	; 112
 1f8:	09 f0       	breq	.+2      	; 0x1fc <Key_Released+0xe>
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	08 95       	ret

000001fe <Key_Scan>:
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Key_Press>
 206:	88 23       	and	r24, r24
 208:	61 f1       	breq	.+88     	; 0x262 <Key_Scan+0x64>
 20a:	e1 e6       	ldi	r30, 0x61	; 97
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	5f e7       	ldi	r21, 0x7F	; 127
 216:	a1 e0       	ldi	r26, 0x01	; 1
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	52 bb       	out	0x12, r21	; 18
 21c:	42 b3       	in	r20, 0x12	; 18
 21e:	bd 01       	movw	r22, r26
 220:	02 2e       	mov	r0, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <Key_Scan+0x2a>
 224:	66 0f       	add	r22, r22
 226:	77 1f       	adc	r23, r23
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <Key_Scan+0x26>
 22c:	96 2f       	mov	r25, r22
 22e:	90 95       	com	r25
 230:	94 23       	and	r25, r20
 232:	92 bb       	out	0x12, r25	; 18
 234:	cd ee       	ldi	r28, 0xED	; 237
 236:	d2 e0       	ldi	r29, 0x02	; 2
 238:	21 97       	sbiw	r28, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <Key_Scan+0x3a>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <Key_Scan+0x40>
 23e:	00 00       	nop
 240:	84 99       	sbic	0x10, 4	; 16
 242:	02 c0       	rjmp	.+4      	; 0x248 <Key_Scan+0x4a>
 244:	80 81       	ld	r24, Z
 246:	06 c0       	rjmp	.+12     	; 0x254 <Key_Scan+0x56>
 248:	85 99       	sbic	0x10, 5	; 16
 24a:	02 c0       	rjmp	.+4      	; 0x250 <Key_Scan+0x52>
 24c:	81 81       	ldd	r24, Z+1	; 0x01
 24e:	02 c0       	rjmp	.+4      	; 0x254 <Key_Scan+0x56>
 250:	86 9b       	sbis	0x10, 6	; 16
 252:	82 81       	ldd	r24, Z+2	; 0x02
 254:	2f 5f       	subi	r18, 0xFF	; 255
 256:	3f 4f       	sbci	r19, 0xFF	; 255
 258:	33 96       	adiw	r30, 0x03	; 3
 25a:	24 30       	cpi	r18, 0x04	; 4
 25c:	31 05       	cpc	r19, r1
 25e:	e9 f6       	brne	.-70     	; 0x21a <Key_Scan+0x1c>
 260:	00 c0       	rjmp	.+0      	; 0x262 <Key_Scan+0x64>
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <comparePW>:
 268:	24 13       	cpse	r18, r20
 26a:	14 c0       	rjmp	.+40     	; 0x294 <comparePW+0x2c>
 26c:	fc 01       	movw	r30, r24
 26e:	30 81       	ld	r19, Z
 270:	fb 01       	movw	r30, r22
 272:	20 81       	ld	r18, Z
 274:	32 13       	cpse	r19, r18
 276:	10 c0       	rjmp	.+32     	; 0x298 <comparePW+0x30>
 278:	fc 01       	movw	r30, r24
 27a:	31 96       	adiw	r30, 0x01	; 1
 27c:	db 01       	movw	r26, r22
 27e:	11 96       	adiw	r26, 0x01	; 1
 280:	08 96       	adiw	r24, 0x08	; 8
 282:	31 91       	ld	r19, Z+
 284:	2d 91       	ld	r18, X+
 286:	32 13       	cpse	r19, r18
 288:	09 c0       	rjmp	.+18     	; 0x29c <comparePW+0x34>
 28a:	e8 17       	cp	r30, r24
 28c:	f9 07       	cpc	r31, r25
 28e:	c9 f7       	brne	.-14     	; 0x282 <comparePW+0x1a>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	08 95       	ret
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	08 95       	ret
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	08 95       	ret
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	08 95       	ret

000002a0 <showPW>:
 2a0:	ef 92       	push	r14
 2a2:	ff 92       	push	r15
 2a4:	0f 93       	push	r16
 2a6:	1f 93       	push	r17
 2a8:	cf 93       	push	r28
 2aa:	7c 01       	movw	r14, r24
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
 2ae:	05 e7       	ldi	r16, 0x75	; 117
 2b0:	10 e0       	ldi	r17, 0x00	; 0
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	8c 2f       	mov	r24, r28
 2b6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcdGotoXY>
 2ba:	f7 01       	movw	r30, r14
 2bc:	81 91       	ld	r24, Z+
 2be:	7f 01       	movw	r14, r30
 2c0:	1f 92       	push	r1
 2c2:	8f 93       	push	r24
 2c4:	1f 93       	push	r17
 2c6:	0f 93       	push	r16
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	8f 93       	push	r24
 2cc:	0e 94 e6 03 	call	0x7cc	; 0x7cc <rprintf1RamRom>
 2d0:	cf 5f       	subi	r28, 0xFF	; 255
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	c8 30       	cpi	r28, 0x08	; 8
 2de:	49 f7       	brne	.-46     	; 0x2b2 <showPW+0x12>
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	ff 90       	pop	r15
 2e8:	ef 90       	pop	r14
 2ea:	08 95       	ret

000002ec <getPW>:
 2ec:	9f 92       	push	r9
 2ee:	af 92       	push	r10
 2f0:	bf 92       	push	r11
 2f2:	cf 92       	push	r12
 2f4:	df 92       	push	r13
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	ec 01       	movw	r28, r24
 304:	5b 01       	movw	r10, r22
 306:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcdClear>
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcdGotoXY>
 312:	ce 01       	movw	r24, r28
 314:	0e 94 cc 03 	call	0x798	; 0x798 <rprintfStr>
 318:	0e 94 f7 00 	call	0x1ee	; 0x1ee <Key_Released>
 31c:	88 23       	and	r24, r24
 31e:	e1 f3       	breq	.-8      	; 0x318 <getPW+0x2c>
 320:	d0 e0       	ldi	r29, 0x00	; 0
 322:	0f 2e       	mov	r0, r31
 324:	f3 e7       	ldi	r31, 0x73	; 115
 326:	cf 2e       	mov	r12, r31
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	df 2e       	mov	r13, r31
 32c:	f0 2d       	mov	r31, r0
 32e:	0f 2e       	mov	r0, r31
 330:	f0 e7       	ldi	r31, 0x70	; 112
 332:	ef 2e       	mov	r14, r31
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	ff 2e       	mov	r15, r31
 338:	f0 2d       	mov	r31, r0
 33a:	0e e6       	ldi	r16, 0x6E	; 110
 33c:	10 e0       	ldi	r17, 0x00	; 0
 33e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Key_Scan>
 342:	c8 2f       	mov	r28, r24
 344:	88 23       	and	r24, r24
 346:	d9 f3       	breq	.-10     	; 0x33e <getPW+0x52>
 348:	83 32       	cpi	r24, 0x23	; 35
 34a:	31 f4       	brne	.+12     	; 0x358 <getPW+0x6c>
 34c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <Key_Released>
 350:	88 23       	and	r24, r24
 352:	e1 f3       	breq	.-8      	; 0x34c <getPW+0x60>
 354:	8d 2f       	mov	r24, r29
 356:	56 c0       	rjmp	.+172    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 358:	8a 32       	cpi	r24, 0x2A	; 42
 35a:	31 f5       	brne	.+76     	; 0x3a8 <getPW+0xbc>
 35c:	0b c0       	rjmp	.+22     	; 0x374 <getPW+0x88>
 35e:	83 ec       	ldi	r24, 0xC3	; 195
 360:	99 e0       	ldi	r25, 0x09	; 9
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <getPW+0x76>
 366:	00 c0       	rjmp	.+0      	; 0x368 <getPW+0x7c>
 368:	00 00       	nop
 36a:	93 e6       	ldi	r25, 0x63	; 99
 36c:	99 16       	cp	r9, r25
 36e:	09 f4       	brne	.+2      	; 0x372 <getPW+0x86>
 370:	49 c0       	rjmp	.+146    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 372:	93 94       	inc	r9
 374:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Key_Scan>
 378:	8a 32       	cpi	r24, 0x2A	; 42
 37a:	19 f4       	brne	.+6      	; 0x382 <getPW+0x96>
 37c:	83 e6       	ldi	r24, 0x63	; 99
 37e:	89 15       	cp	r24, r9
 380:	70 f7       	brcc	.-36     	; 0x35e <getPW+0x72>
 382:	d1 50       	subi	r29, 0x01	; 1
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	8d 2f       	mov	r24, r29
 388:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcdGotoXY>
 38c:	df 92       	push	r13
 38e:	cf 92       	push	r12
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	8f 93       	push	r24
 394:	0e 94 e6 03 	call	0x7cc	; 0x7cc <rprintf1RamRom>
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
 39c:	0f 90       	pop	r0
 39e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <Key_Released>
 3a2:	88 23       	and	r24, r24
 3a4:	e1 f3       	breq	.-8      	; 0x39e <getPW+0xb2>
 3a6:	cb cf       	rjmp	.-106    	; 0x33e <getPW+0x52>
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	8d 2f       	mov	r24, r29
 3ac:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcdGotoXY>
 3b0:	f5 01       	movw	r30, r10
 3b2:	ed 0f       	add	r30, r29
 3b4:	f1 1d       	adc	r31, r1
 3b6:	c0 83       	st	Z, r28
 3b8:	1f 92       	push	r1
 3ba:	cf 93       	push	r28
 3bc:	ff 92       	push	r15
 3be:	ef 92       	push	r14
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	8f 93       	push	r24
 3c4:	0e 94 e6 03 	call	0x7cc	; 0x7cc <rprintf1RamRom>
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <Key_Released>
 3d6:	88 23       	and	r24, r24
 3d8:	e1 f3       	breq	.-8      	; 0x3d2 <getPW+0xe6>
 3da:	8f e4       	ldi	r24, 0x4F	; 79
 3dc:	93 ec       	ldi	r25, 0xC3	; 195
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <getPW+0xf2>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <getPW+0xf8>
 3e4:	00 00       	nop
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	8d 2f       	mov	r24, r29
 3ea:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcdGotoXY>
 3ee:	1f 93       	push	r17
 3f0:	0f 93       	push	r16
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	8f 93       	push	r24
 3f6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <rprintf1RamRom>
 3fa:	df 5f       	subi	r29, 0xFF	; 255
 3fc:	0f 90       	pop	r0
 3fe:	0f 90       	pop	r0
 400:	0f 90       	pop	r0
 402:	9d cf       	rjmp	.-198    	; 0x33e <getPW+0x52>
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	ff 90       	pop	r15
 40e:	ef 90       	pop	r14
 410:	df 90       	pop	r13
 412:	cf 90       	pop	r12
 414:	bf 90       	pop	r11
 416:	af 90       	pop	r10
 418:	9f 90       	pop	r9
 41a:	08 95       	ret

0000041c <login>:
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	cf e5       	ldi	r28, 0x5F	; 95
 422:	d0 e0       	ldi	r29, 0x00	; 0
 424:	6a e2       	ldi	r22, 0x2A	; 42
 426:	71 e0       	ldi	r23, 0x01	; 1
 428:	85 ec       	ldi	r24, 0xC5	; 197
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 76 01 	call	0x2ec	; 0x2ec <getPW>
 430:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 434:	28 2f       	mov	r18, r24
 436:	48 e0       	ldi	r20, 0x08	; 8
 438:	6a e2       	ldi	r22, 0x2A	; 42
 43a:	71 e0       	ldi	r23, 0x01	; 1
 43c:	82 e2       	ldi	r24, 0x22	; 34
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	0e 94 34 01 	call	0x268	; 0x268 <comparePW>
 444:	81 11       	cpse	r24, r1
 446:	19 c0       	rjmp	.+50     	; 0x47a <login+0x5e>
 448:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcdClear>
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcdGotoXY>
 454:	df 93       	push	r29
 456:	cf 93       	push	r28
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	8f 93       	push	r24
 45c:	0e 94 e6 03 	call	0x7cc	; 0x7cc <rprintf1RamRom>
 460:	9f ed       	ldi	r25, 0xDF	; 223
 462:	23 e9       	ldi	r18, 0x93	; 147
 464:	84 e0       	ldi	r24, 0x04	; 4
 466:	91 50       	subi	r25, 0x01	; 1
 468:	20 40       	sbci	r18, 0x00	; 0
 46a:	80 40       	sbci	r24, 0x00	; 0
 46c:	e1 f7       	brne	.-8      	; 0x466 <login+0x4a>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <login+0x54>
 470:	00 00       	nop
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	d5 cf       	rjmp	.-86     	; 0x424 <login+0x8>
 47a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcdClear>
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	83 e0       	ldi	r24, 0x03	; 3
 482:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcdGotoXY>
 486:	84 e5       	ldi	r24, 0x54	; 84
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	9f 93       	push	r25
 48c:	8f 93       	push	r24
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	8f 93       	push	r24
 492:	0e 94 e6 03 	call	0x7cc	; 0x7cc <rprintf1RamRom>
 496:	9f ed       	ldi	r25, 0xDF	; 223
 498:	23 e9       	ldi	r18, 0x93	; 147
 49a:	84 e0       	ldi	r24, 0x04	; 4
 49c:	91 50       	subi	r25, 0x01	; 1
 49e:	20 40       	sbci	r18, 0x00	; 0
 4a0:	80 40       	sbci	r24, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <login+0x80>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <login+0x8a>
 4a6:	00 00       	nop
 4a8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcdClear>
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
 4b0:	0f 90       	pop	r0
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	08 95       	ret

000004b8 <LCD_Custom_Char>:
 4b8:	0f 93       	push	r16
 4ba:	1f 93       	push	r17
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	88 30       	cpi	r24, 0x08	; 8
 4c2:	80 f4       	brcc	.+32     	; 0x4e4 <LCD_Custom_Char+0x2c>
 4c4:	8b 01       	movw	r16, r22
 4c6:	88 0f       	add	r24, r24
 4c8:	88 0f       	add	r24, r24
 4ca:	88 0f       	add	r24, r24
 4cc:	80 5c       	subi	r24, 0xC0	; 192
 4ce:	0e 94 8b 00 	call	0x116	; 0x116 <lcdControlWrite>
 4d2:	e8 01       	movw	r28, r16
 4d4:	08 5f       	subi	r16, 0xF8	; 248
 4d6:	1f 4f       	sbci	r17, 0xFF	; 255
 4d8:	89 91       	ld	r24, Y+
 4da:	0e 94 a0 00 	call	0x140	; 0x140 <lcdDataWrite>
 4de:	c0 17       	cp	r28, r16
 4e0:	d1 07       	cpc	r29, r17
 4e2:	d1 f7       	brne	.-12     	; 0x4d8 <LCD_Custom_Char+0x20>
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	1f 91       	pop	r17
 4ea:	0f 91       	pop	r16
 4ec:	08 95       	ret

000004ee <main>:
		}
	}
}
//========================================================================================= 
int main(void)
{
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	cd b7       	in	r28, 0x3d	; 61
 4f4:	de b7       	in	r29, 0x3e	; 62
 4f6:	c8 55       	subi	r28, 0x58	; 88
 4f8:	d1 09       	sbc	r29, r1
 4fa:	0f b6       	in	r0, 0x3f	; 63
 4fc:	f8 94       	cli
 4fe:	de bf       	out	0x3e, r29	; 62
 500:	0f be       	out	0x3f, r0	; 63
 502:	cd bf       	out	0x3d, r28	; 61
	DDRD=0x8f;
 504:	8f e8       	ldi	r24, 0x8F	; 143
 506:	81 bb       	out	0x11, r24	; 17
	sbi(DDRD,7);
 508:	8f 9a       	sbi	0x11, 7	; 17
	cbi(PORTD,7);
 50a:	97 98       	cbi	0x12, 7	; 18
	lcdInit();
 50c:	0e 94 b5 00 	call	0x16a	; 0x16a <lcdInit>
	rprintfInit(lcdDataWrite);
 510:	80 ea       	ldi	r24, 0xA0	; 160
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 b5 03 	call	0x76a	; 0x76a <rprintfInit>
//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
	unsigned char Character1[8] = { 0x10, 0x18, 0x1c, 0x1e, 0x1c, 0x18, 0x10, 0x00 };  /* Custom char set for alphanumeric LCD Module */
 518:	88 e0       	ldi	r24, 0x08	; 8
 51a:	ed e6       	ldi	r30, 0x6D	; 109
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	de 01       	movw	r26, r28
 520:	11 96       	adiw	r26, 0x01	; 1
 522:	01 90       	ld	r0, Z+
 524:	0d 92       	st	X+, r0
 526:	8a 95       	dec	r24
 528:	e1 f7       	brne	.-8      	; 0x522 <main+0x34>
	unsigned char Character2[8] = { 0x04, 0x0E, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00 };
 52a:	88 e0       	ldi	r24, 0x08	; 8
 52c:	e5 e7       	ldi	r30, 0x75	; 117
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	de 01       	movw	r26, r28
 532:	19 96       	adiw	r26, 0x09	; 9
 534:	01 90       	ld	r0, Z+
 536:	0d 92       	st	X+, r0
 538:	8a 95       	dec	r24
 53a:	e1 f7       	brne	.-8      	; 0x534 <main+0x46>
	unsigned char Character3[8] = { 0x00, 0x00, 0x00, 0x00, 0x1F, 0x0E, 0x04, 0x00 };
 53c:	88 e0       	ldi	r24, 0x08	; 8
 53e:	ed e7       	ldi	r30, 0x7D	; 125
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	de 01       	movw	r26, r28
 544:	51 96       	adiw	r26, 0x11	; 17
 546:	01 90       	ld	r0, Z+
 548:	0d 92       	st	X+, r0
 54a:	8a 95       	dec	r24
 54c:	e1 f7       	brne	.-8      	; 0x546 <main+0x58>

	LCD_Custom_Char(0, Character1);  /* Build Character1 at position 0 */
 54e:	be 01       	movw	r22, r28
 550:	6f 5f       	subi	r22, 0xFF	; 255
 552:	7f 4f       	sbci	r23, 0xFF	; 255
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_Custom_Char>
	LCD_Custom_Char(1, Character2);  /* Build Character2 at position 1 */
 55a:	be 01       	movw	r22, r28
 55c:	67 5f       	subi	r22, 0xF7	; 247
 55e:	7f 4f       	sbci	r23, 0xFF	; 255
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_Custom_Char>
	LCD_Custom_Char(2, Character3);  /* Build Character3 at position 2 */
 566:	be 01       	movw	r22, r28
 568:	6f 5e       	subi	r22, 0xEF	; 239
 56a:	7f 4f       	sbci	r23, 0xFF	; 255
 56c:	82 e0       	ldi	r24, 0x02	; 2
 56e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_Custom_Char>
//	----------------------------------------------------------------------
	char menuItemStr[menuItemNum][16]={{"Change PW"},{"Beep Status"},{"Show Current PW"},{"Log out"}};
 572:	80 e4       	ldi	r24, 0x40	; 64
 574:	e5 e8       	ldi	r30, 0x85	; 133
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	de 01       	movw	r26, r28
 57a:	59 96       	adiw	r26, 0x19	; 25
 57c:	01 90       	ld	r0, Z+
 57e:	0d 92       	st	X+, r0
 580:	8a 95       	dec	r24
 582:	e1 f7       	brne	.-8      	; 0x57c <main+0x8e>
	uint8_t keyEntered=1;
	uint8_t index;
	uint8_t PW[8]={1,1,1,1,1,1,1,1};
	
	//eeprom_update_block((uint8_t*)PW,(const uint8_t*)password_EEPROM,8);
	eeprom_read_block  ((uint8_t*)password,(const uint8_t*)password_EEPROM,8);
 584:	48 e0       	ldi	r20, 0x08	; 8
 586:	50 e0       	ldi	r21, 0x00	; 0
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	70 e0       	ldi	r23, 0x00	; 0
 58c:	82 e2       	ldi	r24, 0x22	; 34
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	0e 94 cd 04 	call	0x99a	; 0x99a <eeprom_read_block>
	
	showPW(password);
 594:	82 e2       	ldi	r24, 0x22	; 34
 596:	91 e0       	ldi	r25, 0x01	; 1
 598:	0e 94 50 01 	call	0x2a0	; 0x2a0 <showPW>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 59c:	2f e7       	ldi	r18, 0x7F	; 127
 59e:	3a e1       	ldi	r19, 0x1A	; 26
 5a0:	86 e0       	ldi	r24, 0x06	; 6
 5a2:	21 50       	subi	r18, 0x01	; 1
 5a4:	30 40       	sbci	r19, 0x00	; 0
 5a6:	80 40       	sbci	r24, 0x00	; 0
 5a8:	e1 f7       	brne	.-8      	; 0x5a2 <main+0xb4>
 5aa:	00 c0       	rjmp	.+0      	; 0x5ac <main+0xbe>
 5ac:	00 00       	nop
	_delay_ms(2000);
	
	login();
 5ae:	0e 94 0e 02 	call	0x41c	; 0x41c <login>
	sbi(DDRA,3);
 5b2:	d3 9a       	sbi	0x1a, 3	; 26
	sbi(PORTA,3);
 5b4:	db 9a       	sbi	0x1b, 3	; 27
	LCD_Custom_Char(2, Character3);  /* Build Character3 at position 2 */
//	----------------------------------------------------------------------
	char menuItemStr[menuItemNum][16]={{"Change PW"},{"Beep Status"},{"Show Current PW"},{"Log out"}};
	int cursurLine;
	uint8_t enter=0;
	uint8_t keyEntered=1;
 5b6:	dd 24       	eor	r13, r13
 5b8:	d3 94       	inc	r13
	LCD_Custom_Char(1, Character2);  /* Build Character2 at position 1 */
	LCD_Custom_Char(2, Character3);  /* Build Character3 at position 2 */
//	----------------------------------------------------------------------
	char menuItemStr[menuItemNum][16]={{"Change PW"},{"Beep Status"},{"Show Current PW"},{"Log out"}};
	int cursurLine;
	uint8_t enter=0;
 5ba:	10 e0       	ldi	r17, 0x00	; 0
			
			case 8:	
				if (index<2){
					if (cursurLine==1)
					index ++;
					cursurLine = 1;
 5bc:	88 24       	eor	r8, r8
 5be:	83 94       	inc	r8
 5c0:	91 2c       	mov	r9, r1
				
			case 2:
				if (index>0){
					if (cursurLine==0) 
					index --;
					cursurLine = 0;
 5c2:	a1 2c       	mov	r10, r1
 5c4:	b1 2c       	mov	r11, r1
 5c6:	03 c0       	rjmp	.+6      	; 0x5ce <main+0xe0>
					cursurLine=0;
				break;
					
				}
				enter=0;
				keyEntered=1;
 5c8:	dd 24       	eor	r13, r13
 5ca:	d3 94       	inc	r13
					index=0;
					cursurLine=0;
				break;
					
				}
				enter=0;
 5cc:	10 e0       	ldi	r17, 0x00	; 0
	sbi(PORTA,3);
	
	while (1)
	{
		
		switch(Key_Scan()){
 5ce:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Key_Scan>
 5d2:	88 30       	cpi	r24, 0x08	; 8
 5d4:	29 f0       	breq	.+10     	; 0x5e0 <main+0xf2>
 5d6:	83 32       	cpi	r24, 0x23	; 35
 5d8:	e1 f0       	breq	.+56     	; 0x612 <main+0x124>
 5da:	82 30       	cpi	r24, 0x02	; 2
 5dc:	01 f5       	brne	.+64     	; 0x61e <main+0x130>
 5de:	0d c0       	rjmp	.+26     	; 0x5fa <main+0x10c>
			
			case 8:	
				if (index<2){
 5e0:	02 30       	cpi	r16, 0x02	; 2
 5e2:	e8 f4       	brcc	.+58     	; 0x61e <main+0x130>
					if (cursurLine==1)
 5e4:	ea 94       	dec	r14
 5e6:	ef 28       	or	r14, r15
 5e8:	09 f4       	brne	.+2      	; 0x5ec <main+0xfe>
					index ++;
 5ea:	0f 5f       	subi	r16, 0xFF	; 255
					cursurLine = 1;
					keyEntered=1;
					while (!Key_Released()); 
 5ec:	0e 94 f7 00 	call	0x1ee	; 0x1ee <Key_Released>
 5f0:	88 23       	and	r24, r24
 5f2:	e1 f3       	breq	.-8      	; 0x5ec <main+0xfe>
			
			case 8:	
				if (index<2){
					if (cursurLine==1)
					index ++;
					cursurLine = 1;
 5f4:	e8 2c       	mov	r14, r8
 5f6:	f9 2c       	mov	r15, r9
 5f8:	15 c0       	rjmp	.+42     	; 0x624 <main+0x136>
					while (!Key_Released()); 
					}
					break;	
				
			case 2:
				if (index>0){
 5fa:	00 23       	and	r16, r16
 5fc:	81 f0       	breq	.+32     	; 0x61e <main+0x130>
					if (cursurLine==0) 
 5fe:	ef 28       	or	r14, r15
 600:	09 f4       	brne	.+2      	; 0x604 <main+0x116>
					index --;
 602:	01 50       	subi	r16, 0x01	; 1
					cursurLine = 0;
					keyEntered=1;
					while (!Key_Released()); 
 604:	0e 94 f7 00 	call	0x1ee	; 0x1ee <Key_Released>
 608:	88 23       	and	r24, r24
 60a:	e1 f3       	breq	.-8      	; 0x604 <main+0x116>
				
			case 2:
				if (index>0){
					if (cursurLine==0) 
					index --;
					cursurLine = 0;
 60c:	ea 2c       	mov	r14, r10
 60e:	fb 2c       	mov	r15, r11
 610:	09 c0       	rjmp	.+18     	; 0x624 <main+0x136>
					break;
				
			case 35: 
				enter=1; 
				keyEntered=1; 
				while (!Key_Released()); 
 612:	0e 94 f7 00 	call	0x1ee	; 0x1ee <Key_Released>
 616:	88 23       	and	r24, r24
 618:	e1 f3       	breq	.-8      	; 0x612 <main+0x124>
					while (!Key_Released()); 
					}
					break;
				
			case 35: 
				enter=1; 
 61a:	11 e0       	ldi	r17, 0x01	; 1
 61c:	03 c0       	rjmp	.+6      	; 0x624 <main+0x136>
				keyEntered=1; 
				while (!Key_Released()); 
				break;
		}
			
		if (keyEntered==1){
 61e:	21 e0       	ldi	r18, 0x01	; 1
 620:	d2 12       	cpse	r13, r18
 622:	2f c0       	rjmp	.+94     	; 0x682 <main+0x194>
				lcdClear();
 624:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcdClear>
				
				lcdGotoXY(0,cursurLine);
 628:	6e 2d       	mov	r22, r14
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcdGotoXY>
				rprintfChar(0);
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	0e 94 ba 03 	call	0x774	; 0x774 <rprintfChar>
				
				lcdGotoXY(1,0);
 636:	60 e0       	ldi	r22, 0x00	; 0
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcdGotoXY>
				rprintfStr(menuItemStr[index]);
 63e:	c0 2e       	mov	r12, r16
 640:	d1 2c       	mov	r13, r1
 642:	89 e1       	ldi	r24, 0x19	; 25
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	8c 0f       	add	r24, r28
 648:	9d 1f       	adc	r25, r29
 64a:	30 e1       	ldi	r19, 0x10	; 16
 64c:	03 9f       	mul	r16, r19
 64e:	80 0d       	add	r24, r0
 650:	91 1d       	adc	r25, r1
 652:	11 24       	eor	r1, r1
 654:	0e 94 cc 03 	call	0x798	; 0x798 <rprintfStr>
				
				lcdGotoXY(1,1);
 658:	61 e0       	ldi	r22, 0x01	; 1
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcdGotoXY>
				rprintfStr(menuItemStr[index+1]);
 660:	c6 01       	movw	r24, r12
 662:	01 96       	adiw	r24, 0x01	; 1
 664:	82 95       	swap	r24
 666:	92 95       	swap	r25
 668:	90 7f       	andi	r25, 0xF0	; 240
 66a:	98 27       	eor	r25, r24
 66c:	80 7f       	andi	r24, 0xF0	; 240
 66e:	98 27       	eor	r25, r24
 670:	29 e1       	ldi	r18, 0x19	; 25
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	2c 0f       	add	r18, r28
 676:	3d 1f       	adc	r19, r29
 678:	82 0f       	add	r24, r18
 67a:	93 1f       	adc	r25, r19
 67c:	0e 94 cc 03 	call	0x798	; 0x798 <rprintfStr>
				
				keyEntered=0;
 680:	d1 2c       	mov	r13, r1
		}
		
		if (enter==1){
 682:	11 30       	cpi	r17, 0x01	; 1
 684:	09 f0       	breq	.+2      	; 0x688 <main+0x19a>
 686:	a3 cf       	rjmp	.-186    	; 0x5ce <main+0xe0>
			switch(cursurLine+index){
 688:	c7 01       	movw	r24, r14
 68a:	80 0f       	add	r24, r16
 68c:	91 1d       	adc	r25, r1
 68e:	81 30       	cpi	r24, 0x01	; 1
 690:	91 05       	cpc	r25, r1
 692:	a1 f1       	breq	.+104    	; 0x6fc <main+0x20e>
 694:	1c f4       	brge	.+6      	; 0x69c <main+0x1ae>
 696:	89 2b       	or	r24, r25
 698:	41 f0       	breq	.+16     	; 0x6aa <main+0x1bc>
 69a:	96 cf       	rjmp	.-212    	; 0x5c8 <main+0xda>
 69c:	82 30       	cpi	r24, 0x02	; 2
 69e:	91 05       	cpc	r25, r1
 6a0:	b9 f1       	breq	.+110    	; 0x710 <main+0x222>
 6a2:	03 97       	sbiw	r24, 0x03	; 3
 6a4:	09 f4       	brne	.+2      	; 0x6a8 <main+0x1ba>
 6a6:	56 c0       	rjmp	.+172    	; 0x754 <main+0x266>
 6a8:	8f cf       	rjmp	.-226    	; 0x5c8 <main+0xda>
				case 0:
					getPW("enter new PW",password);
 6aa:	62 e2       	ldi	r22, 0x22	; 34
 6ac:	71 e0       	ldi	r23, 0x01	; 1
 6ae:	89 ee       	ldi	r24, 0xE9	; 233
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	0e 94 76 01 	call	0x2ec	; 0x2ec <getPW>
					eeprom_update_block((uint8_t*)password,(const uint8_t*)password_EEPROM,8);
 6b6:	48 e0       	ldi	r20, 0x08	; 8
 6b8:	50 e0       	ldi	r21, 0x00	; 0
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	70 e0       	ldi	r23, 0x00	; 0
 6be:	82 e2       	ldi	r24, 0x22	; 34
 6c0:	91 e0       	ldi	r25, 0x01	; 1
 6c2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <eeprom_update_block>
					lcdClear();
 6c6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcdClear>
					lcdGotoXY(0,0);
 6ca:	60 e0       	ldi	r22, 0x00	; 0
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcdGotoXY>
					rprintfStr("your new PW is :");
 6d2:	86 ef       	ldi	r24, 0xF6	; 246
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 cc 03 	call	0x798	; 0x798 <rprintfStr>
					showPW(password);
 6da:	82 e2       	ldi	r24, 0x22	; 34
 6dc:	91 e0       	ldi	r25, 0x01	; 1
 6de:	0e 94 50 01 	call	0x2a0	; 0x2a0 <showPW>
 6e2:	3f eb       	ldi	r19, 0xBF	; 191
 6e4:	87 e2       	ldi	r24, 0x27	; 39
 6e6:	99 e0       	ldi	r25, 0x09	; 9
 6e8:	31 50       	subi	r19, 0x01	; 1
 6ea:	80 40       	sbci	r24, 0x00	; 0
 6ec:	90 40       	sbci	r25, 0x00	; 0
 6ee:	e1 f7       	brne	.-8      	; 0x6e8 <main+0x1fa>
 6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <main+0x204>
 6f2:	00 00       	nop
					cursurLine=0;
				break;
					
				}
				enter=0;
				keyEntered=1;
 6f4:	dd 24       	eor	r13, r13
 6f6:	d3 94       	inc	r13
					index=0;
					cursurLine=0;
				break;
					
				}
				enter=0;
 6f8:	10 e0       	ldi	r17, 0x00	; 0
 6fa:	69 cf       	rjmp	.-302    	; 0x5ce <main+0xe0>
					showPW(password);
					_delay_ms(3000);
				break;
				
				case 1:
					lcdClear();
 6fc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcdClear>
					rprintfStr("this is 1");
 700:	87 e0       	ldi	r24, 0x07	; 7
 702:	91 e0       	ldi	r25, 0x01	; 1
 704:	0e 94 cc 03 	call	0x798	; 0x798 <rprintfStr>
					cursurLine=0;
				break;
					
				}
				enter=0;
				keyEntered=1;
 708:	dd 24       	eor	r13, r13
 70a:	d3 94       	inc	r13
					index=0;
					cursurLine=0;
				break;
					
				}
				enter=0;
 70c:	10 e0       	ldi	r17, 0x00	; 0
				break;
				
				case 1:
					lcdClear();
					rprintfStr("this is 1");
				break;
 70e:	5f cf       	rjmp	.-322    	; 0x5ce <main+0xe0>
				
				case 2:
					lcdClear();
 710:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcdClear>
					lcdGotoXY(0,0);
 714:	60 e0       	ldi	r22, 0x00	; 0
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcdGotoXY>
					rprintfStr("Current PW is:");
 71c:	81 e1       	ldi	r24, 0x11	; 17
 71e:	91 e0       	ldi	r25, 0x01	; 1
 720:	0e 94 cc 03 	call	0x798	; 0x798 <rprintfStr>
					eeprom_update_block((uint8_t*)password,(const uint8_t*)password_EEPROM,8);
 724:	48 e0       	ldi	r20, 0x08	; 8
 726:	50 e0       	ldi	r21, 0x00	; 0
 728:	60 e0       	ldi	r22, 0x00	; 0
 72a:	70 e0       	ldi	r23, 0x00	; 0
 72c:	82 e2       	ldi	r24, 0x22	; 34
 72e:	91 e0       	ldi	r25, 0x01	; 1
 730:	0e 94 dd 04 	call	0x9ba	; 0x9ba <eeprom_update_block>
					lcdGotoXY(0,1);
 734:	61 e0       	ldi	r22, 0x01	; 1
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcdGotoXY>
					showPW(password);
 73c:	82 e2       	ldi	r24, 0x22	; 34
 73e:	91 e0       	ldi	r25, 0x01	; 1
 740:	0e 94 50 01 	call	0x2a0	; 0x2a0 <showPW>
					while(!(Key_Scan()==42));
 744:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Key_Scan>
 748:	8a 32       	cpi	r24, 0x2A	; 42
 74a:	e1 f7       	brne	.-8      	; 0x744 <main+0x256>
					cursurLine=0;
				break;
					
				}
				enter=0;
				keyEntered=1;
 74c:	dd 24       	eor	r13, r13
 74e:	d3 94       	inc	r13
					index=0;
					cursurLine=0;
				break;
					
				}
				enter=0;
 750:	10 e0       	ldi	r17, 0x00	; 0
 752:	3d cf       	rjmp	.-390    	; 0x5ce <main+0xe0>
					showPW(password);
					while(!(Key_Scan()==42));
				break;
				
				case 3:
					cbi(PORTA,3);
 754:	db 98       	cbi	0x1b, 3	; 27
					login();
 756:	0e 94 0e 02 	call	0x41c	; 0x41c <login>
					sbi(PORTA,3);
 75a:	db 9a       	sbi	0x1b, 3	; 27
					index=0;
 75c:	00 e0       	ldi	r16, 0x00	; 0
					cursurLine=0;
				break;
					
				}
				enter=0;
				keyEntered=1;
 75e:	dd 24       	eor	r13, r13
 760:	d3 94       	inc	r13
					index=0;
					cursurLine=0;
				break;
					
				}
				enter=0;
 762:	10 e0       	ldi	r17, 0x00	; 0
				case 3:
					cbi(PORTA,3);
					login();
					sbi(PORTA,3);
					index=0;
					cursurLine=0;
 764:	ea 2c       	mov	r14, r10
 766:	fb 2c       	mov	r15, r11
				break;
 768:	32 cf       	rjmp	.-412    	; 0x5ce <main+0xe0>

0000076a <rprintfInit>:
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
	}
}
 76a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
 76e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 772:	08 95       	ret

00000774 <rprintfChar>:
 774:	cf 93       	push	r28
 776:	c8 2f       	mov	r28, r24
 778:	8a 30       	cpi	r24, 0x0A	; 10
 77a:	31 f4       	brne	.+12     	; 0x788 <rprintfChar+0x14>
 77c:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <__data_end>
 780:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <__data_end+0x1>
 784:	8d e0       	ldi	r24, 0x0D	; 13
 786:	09 95       	icall
 788:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <__data_end>
 78c:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <__data_end+0x1>
 790:	8c 2f       	mov	r24, r28
 792:	09 95       	icall
 794:	cf 91       	pop	r28
 796:	08 95       	ret

00000798 <rprintfStr>:
 798:	cf 93       	push	r28
 79a:	df 93       	push	r29
 79c:	ec 01       	movw	r28, r24
 79e:	89 2b       	or	r24, r25
 7a0:	49 f0       	breq	.+18     	; 0x7b4 <rprintfStr+0x1c>
 7a2:	88 81       	ld	r24, Y
 7a4:	88 23       	and	r24, r24
 7a6:	31 f0       	breq	.+12     	; 0x7b4 <rprintfStr+0x1c>
 7a8:	21 96       	adiw	r28, 0x01	; 1
 7aa:	0e 94 ba 03 	call	0x774	; 0x774 <rprintfChar>
 7ae:	89 91       	ld	r24, Y+
 7b0:	81 11       	cpse	r24, r1
 7b2:	fb cf       	rjmp	.-10     	; 0x7aa <rprintfStr+0x12>
 7b4:	df 91       	pop	r29
 7b6:	cf 91       	pop	r28
 7b8:	08 95       	ret

000007ba <rprintfu04>:
 7ba:	8f 70       	andi	r24, 0x0F	; 15
 7bc:	e8 2f       	mov	r30, r24
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	e8 58       	subi	r30, 0x88	; 136
 7c2:	ff 4f       	sbci	r31, 0xFF	; 255
 7c4:	84 91       	lpm	r24, Z
 7c6:	0e 94 ba 03 	call	0x774	; 0x774 <rprintfChar>
 7ca:	08 95       	ret

000007cc <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
 7cc:	2f 92       	push	r2
 7ce:	3f 92       	push	r3
 7d0:	4f 92       	push	r4
 7d2:	5f 92       	push	r5
 7d4:	6f 92       	push	r6
 7d6:	7f 92       	push	r7
 7d8:	8f 92       	push	r8
 7da:	9f 92       	push	r9
 7dc:	af 92       	push	r10
 7de:	bf 92       	push	r11
 7e0:	cf 92       	push	r12
 7e2:	df 92       	push	r13
 7e4:	ef 92       	push	r14
 7e6:	ff 92       	push	r15
 7e8:	0f 93       	push	r16
 7ea:	1f 93       	push	r17
 7ec:	cf 93       	push	r28
 7ee:	df 93       	push	r29
 7f0:	cd b7       	in	r28, 0x3d	; 61
 7f2:	de b7       	in	r29, 0x3e	; 62
 7f4:	7d 88       	ldd	r7, Y+21	; 0x15
 7f6:	ce 88       	ldd	r12, Y+22	; 0x16
 7f8:	df 88       	ldd	r13, Y+23	; 0x17
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
 7fa:	4e 01       	movw	r8, r28
 7fc:	28 e1       	ldi	r18, 0x18	; 24
 7fe:	82 0e       	add	r8, r18
 800:	91 1c       	adc	r9, r1

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 802:	51 2c       	mov	r5, r1
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 804:	61 2c       	mov	r6, r1
 806:	41 2c       	mov	r4, r1
 808:	06 c0       	rjmp	.+12     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
 80a:	88 23       	and	r24, r24
 80c:	09 f4       	brne	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80e:	8d c0       	rjmp	.+282    	; 0x92a <__stack+0xcb>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
 810:	0e 94 ba 03 	call	0x774	; 0x774 <rprintfChar>
 814:	68 01       	movw	r12, r16
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 816:	77 20       	and	r7, r7
 818:	41 f0       	breq	.+16     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 81a:	86 01       	movw	r16, r12
 81c:	0f 5f       	subi	r16, 0xFF	; 255
 81e:	1f 4f       	sbci	r17, 0xFF	; 255
 820:	f6 01       	movw	r30, r12
 822:	84 91       	lpm	r24, Z
 824:	85 32       	cpi	r24, 0x25	; 37
 826:	89 f7       	brne	.-30     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 828:	08 c0       	rjmp	.+16     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 82a:	f6 01       	movw	r30, r12
 82c:	80 81       	ld	r24, Z
 82e:	85 32       	cpi	r24, 0x25	; 37
 830:	51 f0       	breq	.+20     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 832:	86 01       	movw	r16, r12
 834:	0f 5f       	subi	r16, 0xFF	; 255
 836:	1f 4f       	sbci	r17, 0xFF	; 255
 838:	e8 cf       	rjmp	.-48     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
 83a:	f2 e0       	ldi	r31, 0x02	; 2
 83c:	cf 0e       	add	r12, r31
 83e:	d1 1c       	adc	r13, r1
 840:	f8 01       	movw	r30, r16
 842:	84 91       	lpm	r24, Z
 844:	06 c0       	rjmp	.+12     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 846:	f6 01       	movw	r30, r12
 848:	81 81       	ldd	r24, Z+1	; 0x01
 84a:	96 01       	movw	r18, r12
 84c:	2e 5f       	subi	r18, 0xFE	; 254
 84e:	3f 4f       	sbci	r19, 0xFF	; 255
 850:	69 01       	movw	r12, r18
 852:	84 36       	cpi	r24, 0x64	; 100
 854:	71 f0       	breq	.+28     	; 0x872 <__stack+0x13>
 856:	88 37       	cpi	r24, 0x78	; 120
 858:	09 f4       	brne	.+2      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 85a:	59 c0       	rjmp	.+178    	; 0x90e <__stack+0xaf>
 85c:	83 36       	cpi	r24, 0x63	; 99
 85e:	31 f4       	brne	.+12     	; 0x86c <__stack+0xd>
		{
			case 'c': format_flag = va_arg(ap,int);
 860:	f4 01       	movw	r30, r8
 862:	80 81       	ld	r24, Z
 864:	94 01       	movw	r18, r8
 866:	2e 5f       	subi	r18, 0xFE	; 254
 868:	3f 4f       	sbci	r19, 0xFF	; 255
 86a:	49 01       	movw	r8, r18
			default:  rprintfChar(format_flag); continue;
 86c:	0e 94 ba 03 	call	0x774	; 0x774 <rprintfChar>
 870:	d2 cf       	rjmp	.-92     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 872:	f4 01       	movw	r30, r8
 874:	e0 80       	ld	r14, Z
 876:	f1 80       	ldd	r15, Z+1	; 0x01
 878:	32 e0       	ldi	r19, 0x02	; 2
 87a:	83 0e       	add	r8, r19
 87c:	91 1c       	adc	r9, r1
			if (format_flag == 'd')
			{
				if (((int)u_val) < 0)
 87e:	ff 20       	and	r15, r15
 880:	34 f4       	brge	.+12     	; 0x88e <__stack+0x2f>
				{
					u_val = - u_val;
 882:	f1 94       	neg	r15
 884:	e1 94       	neg	r14
 886:	f1 08       	sbc	r15, r1
					rprintfChar('-');
 888:	8d e2       	ldi	r24, 0x2D	; 45
 88a:	0e 94 ba 03 	call	0x774	; 0x774 <rprintfChar>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 88e:	80 e1       	ldi	r24, 0x10	; 16
 890:	e8 16       	cp	r14, r24
 892:	87 e2       	ldi	r24, 0x27	; 39
 894:	f8 06       	cpc	r15, r24
 896:	d0 f4       	brcc	.+52     	; 0x8cc <__stack+0x6d>
 898:	00 e1       	ldi	r16, 0x10	; 16
 89a:	17 e2       	ldi	r17, 0x27	; 39
 89c:	98 01       	movw	r18, r16
 89e:	ad ec       	ldi	r26, 0xCD	; 205
 8a0:	bc ec       	ldi	r27, 0xCC	; 204
 8a2:	0e 94 be 04 	call	0x97c	; 0x97c <__umulhisi3>
 8a6:	8c 01       	movw	r16, r24
 8a8:	16 95       	lsr	r17
 8aa:	07 95       	ror	r16
 8ac:	16 95       	lsr	r17
 8ae:	07 95       	ror	r16
 8b0:	16 95       	lsr	r17
 8b2:	07 95       	ror	r16
 8b4:	02 30       	cpi	r16, 0x02	; 2
 8b6:	11 05       	cpc	r17, r1
 8b8:	88 f0       	brcs	.+34     	; 0x8dc <__stack+0x7d>
 8ba:	e0 16       	cp	r14, r16
 8bc:	f1 06       	cpc	r15, r17
 8be:	70 f3       	brcs	.-36     	; 0x89c <__stack+0x3d>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 8c0:	0f 2e       	mov	r0, r31
 8c2:	fa e0       	ldi	r31, 0x0A	; 10
 8c4:	2f 2e       	mov	r2, r31
 8c6:	f0 2d       	mov	r31, r0
 8c8:	35 2c       	mov	r3, r5
 8ca:	0d c0       	rjmp	.+26     	; 0x8e6 <__stack+0x87>
 8cc:	0f 2e       	mov	r0, r31
 8ce:	fa e0       	ldi	r31, 0x0A	; 10
 8d0:	2f 2e       	mov	r2, r31
 8d2:	f0 2d       	mov	r31, r0
 8d4:	35 2c       	mov	r3, r5
 8d6:	00 e1       	ldi	r16, 0x10	; 16
 8d8:	17 e2       	ldi	r17, 0x27	; 39
 8da:	05 c0       	rjmp	.+10     	; 0x8e6 <__stack+0x87>
 8dc:	0f 2e       	mov	r0, r31
 8de:	fa e0       	ldi	r31, 0x0A	; 10
 8e0:	2f 2e       	mov	r2, r31
 8e2:	f0 2d       	mov	r31, r0
 8e4:	35 2c       	mov	r3, r5
				while (div_val > 1 && div_val > u_val) div_val /= 10;
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
 8e6:	c7 01       	movw	r24, r14
 8e8:	b8 01       	movw	r22, r16
 8ea:	0e 94 aa 04 	call	0x954	; 0x954 <__udivmodhi4>
 8ee:	a8 2e       	mov	r10, r24
 8f0:	b9 2e       	mov	r11, r25
 8f2:	86 2f       	mov	r24, r22
 8f4:	0e 94 dd 03 	call	0x7ba	; 0x7ba <rprintfu04>
				u_val %= div_val;
 8f8:	ea 2c       	mov	r14, r10
 8fa:	fb 2c       	mov	r15, r11
				div_val /= base;
 8fc:	c8 01       	movw	r24, r16
 8fe:	62 2d       	mov	r22, r2
 900:	73 2d       	mov	r23, r3
 902:	0e 94 aa 04 	call	0x954	; 0x954 <__udivmodhi4>
 906:	8b 01       	movw	r16, r22
			} while (div_val);
 908:	67 2b       	or	r22, r23
 90a:	69 f7       	brne	.-38     	; 0x8e6 <__stack+0x87>
 90c:	84 cf       	rjmp	.-248    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 90e:	f4 01       	movw	r30, r8
 910:	e0 80       	ld	r14, Z
 912:	f1 80       	ldd	r15, Z+1	; 0x01
 914:	94 01       	movw	r18, r8
 916:	2e 5f       	subi	r18, 0xFE	; 254
 918:	3f 4f       	sbci	r19, 0xFF	; 255
 91a:	49 01       	movw	r8, r18
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 91c:	68 94       	set
 91e:	22 24       	eor	r2, r2
 920:	24 f8       	bld	r2, 4
 922:	36 2c       	mov	r3, r6
 924:	04 2d       	mov	r16, r4
 926:	10 e1       	ldi	r17, 0x10	; 16
 928:	de cf       	rjmp	.-68     	; 0x8e6 <__stack+0x87>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
 92a:	80 e0       	ldi	r24, 0x00	; 0
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	df 91       	pop	r29
 930:	cf 91       	pop	r28
 932:	1f 91       	pop	r17
 934:	0f 91       	pop	r16
 936:	ff 90       	pop	r15
 938:	ef 90       	pop	r14
 93a:	df 90       	pop	r13
 93c:	cf 90       	pop	r12
 93e:	bf 90       	pop	r11
 940:	af 90       	pop	r10
 942:	9f 90       	pop	r9
 944:	8f 90       	pop	r8
 946:	7f 90       	pop	r7
 948:	6f 90       	pop	r6
 94a:	5f 90       	pop	r5
 94c:	4f 90       	pop	r4
 94e:	3f 90       	pop	r3
 950:	2f 90       	pop	r2
 952:	08 95       	ret

00000954 <__udivmodhi4>:
 954:	aa 1b       	sub	r26, r26
 956:	bb 1b       	sub	r27, r27
 958:	51 e1       	ldi	r21, 0x11	; 17
 95a:	07 c0       	rjmp	.+14     	; 0x96a <__udivmodhi4_ep>

0000095c <__udivmodhi4_loop>:
 95c:	aa 1f       	adc	r26, r26
 95e:	bb 1f       	adc	r27, r27
 960:	a6 17       	cp	r26, r22
 962:	b7 07       	cpc	r27, r23
 964:	10 f0       	brcs	.+4      	; 0x96a <__udivmodhi4_ep>
 966:	a6 1b       	sub	r26, r22
 968:	b7 0b       	sbc	r27, r23

0000096a <__udivmodhi4_ep>:
 96a:	88 1f       	adc	r24, r24
 96c:	99 1f       	adc	r25, r25
 96e:	5a 95       	dec	r21
 970:	a9 f7       	brne	.-22     	; 0x95c <__udivmodhi4_loop>
 972:	80 95       	com	r24
 974:	90 95       	com	r25
 976:	bc 01       	movw	r22, r24
 978:	cd 01       	movw	r24, r26
 97a:	08 95       	ret

0000097c <__umulhisi3>:
 97c:	a2 9f       	mul	r26, r18
 97e:	b0 01       	movw	r22, r0
 980:	b3 9f       	mul	r27, r19
 982:	c0 01       	movw	r24, r0
 984:	a3 9f       	mul	r26, r19
 986:	70 0d       	add	r23, r0
 988:	81 1d       	adc	r24, r1
 98a:	11 24       	eor	r1, r1
 98c:	91 1d       	adc	r25, r1
 98e:	b2 9f       	mul	r27, r18
 990:	70 0d       	add	r23, r0
 992:	81 1d       	adc	r24, r1
 994:	11 24       	eor	r1, r1
 996:	91 1d       	adc	r25, r1
 998:	08 95       	ret

0000099a <eeprom_read_block>:
 99a:	dc 01       	movw	r26, r24
 99c:	cb 01       	movw	r24, r22

0000099e <eeprom_read_blraw>:
 99e:	fc 01       	movw	r30, r24
 9a0:	e1 99       	sbic	0x1c, 1	; 28
 9a2:	fe cf       	rjmp	.-4      	; 0x9a0 <eeprom_read_blraw+0x2>
 9a4:	06 c0       	rjmp	.+12     	; 0x9b2 <eeprom_read_blraw+0x14>
 9a6:	ff bb       	out	0x1f, r31	; 31
 9a8:	ee bb       	out	0x1e, r30	; 30
 9aa:	e0 9a       	sbi	0x1c, 0	; 28
 9ac:	31 96       	adiw	r30, 0x01	; 1
 9ae:	0d b2       	in	r0, 0x1d	; 29
 9b0:	0d 92       	st	X+, r0
 9b2:	41 50       	subi	r20, 0x01	; 1
 9b4:	50 40       	sbci	r21, 0x00	; 0
 9b6:	b8 f7       	brcc	.-18     	; 0x9a6 <eeprom_read_blraw+0x8>
 9b8:	08 95       	ret

000009ba <eeprom_update_block>:
 9ba:	dc 01       	movw	r26, r24
 9bc:	a4 0f       	add	r26, r20
 9be:	b5 1f       	adc	r27, r21
 9c0:	41 50       	subi	r20, 0x01	; 1
 9c2:	50 40       	sbci	r21, 0x00	; 0
 9c4:	48 f0       	brcs	.+18     	; 0x9d8 <eeprom_update_block+0x1e>
 9c6:	cb 01       	movw	r24, r22
 9c8:	84 0f       	add	r24, r20
 9ca:	95 1f       	adc	r25, r21
 9cc:	2e 91       	ld	r18, -X
 9ce:	0e 94 ee 04 	call	0x9dc	; 0x9dc <eeprom_update_r18>
 9d2:	41 50       	subi	r20, 0x01	; 1
 9d4:	50 40       	sbci	r21, 0x00	; 0
 9d6:	d0 f7       	brcc	.-12     	; 0x9cc <eeprom_update_block+0x12>
 9d8:	08 95       	ret

000009da <eeprom_update_byte>:
 9da:	26 2f       	mov	r18, r22

000009dc <eeprom_update_r18>:
 9dc:	e1 99       	sbic	0x1c, 1	; 28
 9de:	fe cf       	rjmp	.-4      	; 0x9dc <eeprom_update_r18>
 9e0:	9f bb       	out	0x1f, r25	; 31
 9e2:	8e bb       	out	0x1e, r24	; 30
 9e4:	e0 9a       	sbi	0x1c, 0	; 28
 9e6:	01 97       	sbiw	r24, 0x01	; 1
 9e8:	0d b2       	in	r0, 0x1d	; 29
 9ea:	02 16       	cp	r0, r18
 9ec:	31 f0       	breq	.+12     	; 0x9fa <eeprom_update_r18+0x1e>
 9ee:	2d bb       	out	0x1d, r18	; 29
 9f0:	0f b6       	in	r0, 0x3f	; 63
 9f2:	f8 94       	cli
 9f4:	e2 9a       	sbi	0x1c, 2	; 28
 9f6:	e1 9a       	sbi	0x1c, 1	; 28
 9f8:	0f be       	out	0x3f, r0	; 63
 9fa:	08 95       	ret

000009fc <_exit>:
 9fc:	f8 94       	cli

000009fe <__stop_program>:
 9fe:	ff cf       	rjmp	.-2      	; 0x9fe <__stop_program>
